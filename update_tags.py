#!/usr/bin/env python3

"""
Update JSON files with new deep-analyzed tags
===========================================

This script updates all JSON files in src/data/ with the new tags
generated by the deep content analysis system.
"""

import json
from pathlib import Path
from typing import Dict

def update_json_file(json_path: Path, new_tags_map: Dict[str, list]) -> int:
    """Update a single JSON file with new tags"""
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        updated_count = 0
        
        # Find the main content array (could be 'articles', 'interviews', 'reviews', etc.)
        content_key = None
        for key in data.keys():
            if isinstance(data[key], list) and len(data[key]) > 0:
                if 'metadata' in data[key][0] and 'id' in data[key][0]['metadata']:
                    content_key = key
                    break
        
        if not content_key:
            print(f"   ⚠️  Could not find content array in {json_path.name}")
            return 0
        
        # Update each item
        for item in data[content_key]:
            if 'metadata' in item and 'id' in item['metadata']:
                item_id = item['metadata']['id']
                
                if item_id in new_tags_map:
                    # Update tags
                    old_tags = item.get('tags', [])
                    new_tags = new_tags_map[item_id]
                    item['tags'] = new_tags
                    updated_count += 1
                    
                    print(f"      {item_id}: {len(old_tags)} → {len(new_tags)} tags")
        
        # Update metadata timestamp
        if 'metadata' in data:
            from datetime import datetime
            data['metadata']['lastModified'] = datetime.now().isoformat() + 'Z'
        
        # Write back to file
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        
        return updated_count
    
    except Exception as e:
        print(f"   ❌ Error updating {json_path.name}: {e}")
        return 0

def main():
    """Main function to update all JSON files"""
    data_dir = Path("/Users/todddunning/Desktop/Northworks/northworks/src/data")
    
    # Load the new tags mapping
    new_tags_file = data_dir / "new_tags_mapping.json"
    if not new_tags_file.exists():
        print("❌ New tags mapping file not found. Run deep_content_analysis.py first.")
        return
    
    with open(new_tags_file, 'r', encoding='utf-8') as f:
        new_tags_map = json.load(f)
    
    print("🔄 Updating JSON files with new tags...")
    print(f"   📁 Found {len(new_tags_map)} tag mappings")
    
    # Find all JSON files in data directory
    json_files = [f for f in data_dir.glob("*.json") if f.name != "new_tags_mapping.json"]
    
    total_updated = 0
    
    for json_file in json_files:
        print(f"\n📝 Updating {json_file.name}")
        updated_count = update_json_file(json_file, new_tags_map)
        total_updated += updated_count
        print(f"   ✅ Updated {updated_count} items")
    
    print("\n🎉 Update complete!")
    print(f"   📊 Total items updated: {total_updated}")
    print(f"   📁 Updated {len(json_files)} JSON files")
    
    # Clean up the temporary mapping file
    new_tags_file.unlink()
    print("   🗑️  Cleaned up temporary mapping file")
    
    print("\n✨ All JSON files now have improved tags!")
    print("   🔧 Next steps:")
    print("      1. Test the application")
    print("      2. Review tag quality in search/browse functionality")
    print("      3. Commit changes if satisfied with results")

if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
Apply Deep Content Analysis Tags to JSON Files
==============================================

Takes the generated tag mappings from deep_content_analysis.py and applies them
to the corresponding normalized JSON files, replacing shallow tags with
meaningful, content-specific ones.
"""

import json
from pathlib import Path
from typing import Dict, List

def load_tag_mappings() -> Dict[str, List[str]]:
    """Load the tag mappings generated by deep_content_analysis.py"""
    mapping_file = Path("src/data/new_tags_mapping.json")
    
    if not mapping_file.exists():
        print(f"‚ùå Tag mapping file not found: {mapping_file}")
        return {}
    
    with open(mapping_file, 'r', encoding='utf-8') as f:
        mappings = json.load(f)
    
    print(f"üìñ Loaded tag mappings for {len(mappings)} files")
    return mappings

def get_content_type(file_id: str) -> str:
    """Determine content type from markdown file"""
    md_file = Path(f"public/content/{file_id}.md")
    
    if not md_file.exists():
        return "unknown"
    
    try:
        with open(md_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # Extract type from frontmatter
        if 'type: interview' in content:
            return 'interview'
        elif 'type: article' in content:
            return 'article'
        elif 'type: review' in content:
            return 'review'
        elif 'type: professional' in content:
            return 'professional'
        elif 'type: publication' in content:
            return 'publication'
        elif 'type: background' in content:
            return 'background'
        else:
            return 'unknown'
    except Exception as e:
        print(f"‚ö†Ô∏è Error reading {md_file}: {e}")
        return 'unknown'

def update_json_file(json_path: Path, tag_mappings: Dict[str, List[str]], content_type: str) -> int:
    """Update a single JSON file with new tags"""
    
    if not json_path.exists():
        print(f"‚ö†Ô∏è JSON file not found: {json_path}")
        return 0
    
    try:
        # Load JSON data
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        updated_count = 0
        
        # Update each item that has corresponding tag mappings
        for item in data.get('items', []):
            item_id = item.get('id', item.get('slug', ''))
            
            if item_id in tag_mappings:
                # Verify content type matches
                item_type = get_content_type(item_id)
                
                if item_type == content_type or content_type == 'unknown':
                    # Apply new sophisticated tags
                    new_tags = tag_mappings[item_id]
                    item['tags'] = new_tags
                    updated_count += 1
                    
                    print(f"  ‚úì Updated {item_id}: {new_tags}")
        
        # Save updated file
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ Updated {updated_count} items in {json_path.name}")
        return updated_count
        
    except Exception as e:
        print(f"‚ùå Error updating {json_path}: {e}")
        return 0

def apply_all_tags():
    """Apply tags to all normalized JSON files"""
    
    print("üéØ APPLYING DEEP CONTENT ANALYSIS TAGS")
    print("=" * 45)
    
    # Load tag mappings
    tag_mappings = load_tag_mappings()
    if not tag_mappings:
        return
    
    # Define JSON files and their content types
    json_files = [
        ('src/data/normalized/cheryl-interviews.json', 'interview'),
        ('src/data/normalized/cheryl-articles.json', 'article'),
        ('src/data/normalized/cheryl-reviews.json', 'review'),
        ('src/data/normalized/warner-professional.json', 'professional'),
        ('src/data/normalized/warner-publications.json', 'publication'),
        ('src/data/normalized/warner-background.json', 'background')
    ]
    
    total_updated = 0
    
    for json_file, content_type in json_files:
        json_path = Path(json_file)
        print(f"\nüìù Processing {json_path.name} ({content_type})...")
        
        updated = update_json_file(json_path, tag_mappings, content_type)
        total_updated += updated
    
    print(f"\n‚úÖ TAG APPLICATION COMPLETE")
    print(f"   Total items updated: {total_updated}")
    print(f"   Files processed: {len(json_files)}")
    
    # Show some examples
    print(f"\nüîç EXAMPLE UPDATED TAGS:")
    sample_items = list(tag_mappings.items())[:5]
    for item_id, tags in sample_items:
        print(f"   {item_id}: {tags}")

if __name__ == "__main__":
    apply_all_tags()
